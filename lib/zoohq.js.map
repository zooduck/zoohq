{"version":3,"sources":["../src/zoohq.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAM,KAAK,GAAI,YAAM;AACjB,MAAM,OAAO,GAAG,EAAhB;AACA,MAAI,KAAK,GAAG,EAAZ;AAEA,SAAO;AACH,IAAA,QADG,oBACM,IADN,EACkD;AAAA,UAAtC,IAAsC,uEAA/B,SAA+B;AAAA,UAApB,WAAoB,uEAAN,IAAM;AACjD,MAAA,KAAK,qBACE,KADF,MAEE,IAFF,CAAL;;AAKA,UAAI,CAAC,WAAL,EAAkB;AACd;AACH;;AAED,UAAI;AACA,QAAA,OAAO,CAAC,IAAD,CAAP,CAAc,KAAd;AAEA,YAAM,WAAW,GAAG,IAAI,WAAJ,CAAgB,IAAhB,EAAsB;AACtC,UAAA,MAAM,EAAE;AACJ,YAAA,KAAK,EAAE;AADH;AAD8B,SAAtB,CAApB;AAMA,QAAA,MAAM,CAAC,aAAP,CAAqB,WAArB;AACH,OAVD,CAUE,OAAO,GAAP,EAAY;AACV,cAAM,KAAK,aAAK,IAAL,wEAAsE,IAAtE,8DAAqI,GAArI,CAAX;AACH;AACJ,KAxBE;AAyBH,IAAA,MAzBG,kBAyBI,IAzBJ,EAyBU,QAzBV,EAyBoB;AACnB,MAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B,QAA9B;AACH,KA3BE;AA4BH,IAAA,QA5BG,oBA4BM,MA5BN,EA4Bc;AAAA,UACL,IADK,GACc,MADd,CACL,IADK;AAAA,UACC,QADD,GACc,MADd,CACC,QADD;AAGb,MAAA,OAAO,CAAC,IAAD,CAAP,GAAgB,QAAhB;AACH,KAhCE;AAiCH,IAAA,QAjCG,oBAiCM,YAjCN,EAiCoB;AACnB,MAAA,KAAK,qBACE,YADF,CAAL;AAGH,KArCE;;AAsCH,QAAI,OAAJ,GAAc;AACV,aAAO,OAAP;AACH,KAxCE;;AAyCH,QAAI,KAAJ,GAAY;AACR,aAAO,KAAP;AACH;;AA3CE,GAAP;AA6CH,CAjDa,EAAd;;eAmDe,K","file":"zoohq.js","sourcesContent":["const zoohq = (() => {\n    const actions = {};\n    let store = {};\n\n    return {\n        dispatch(type, data = undefined, useCallback = true) {\n            store = {\n                ...store,\n                ...data\n            };\n\n            if (!useCallback) {\n                return;\n            }\n\n            try {\n                actions[type](store);\n\n                const customEvent = new CustomEvent(type, {\n                    detail: {\n                        store: store\n                    }\n                });\n\n                window.dispatchEvent(customEvent);\n            } catch (err) {\n                throw Error(`\"${type}\" is not a valid action type. Use zoohq.register({ type: '${type}', callback: () => {} ) to register the action first.\\n`, err);\n            }\n        },\n        listen(type, callback) {\n            window.addEventListener(type, callback);\n        },\n        register(action) {\n            const { type, callback } = action;\n\n            actions[type] = callback;\n        },\n        setStore(initialStore) {\n            store = {\n                ...initialStore\n            };\n        },\n        get actions() {\n            return actions;\n        },\n        get store() {\n            return store;\n        }\n    };\n})();\n\nexport default zoohq;\n"]}