{"version":3,"sources":["../src/zoohq.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAM,KAAK,GAAI,YAAM;AACjB,MAAM,OAAO,GAAG,EAAhB;AACA,MAAI,KAAK,GAAG,EAAZ;AAEA,SAAO;AACH,IAAA,QADG,oBACM,IADN,EAC8B;AAAA,UAAlB,IAAkB,uEAAX,SAAW;AAC7B,UAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,KAAf,CAAX,CAAlB;AAEA,MAAA,KAAK,qBACE,SADF,MAEE,IAFF,CAAL;;AAKA,UAAI;AACA,QAAA,OAAO,CAAC,IAAD,CAAP,CAAc,KAAd;AAEA,YAAM,WAAW,GAAG,IAAI,WAAJ,CAAgB,IAAhB,EAAsB;AACtC,UAAA,MAAM,EAAE;AACJ,YAAA,KAAK,EAAE;AADH;AAD8B,SAAtB,CAApB;AAMA,QAAA,MAAM,CAAC,aAAP,CAAqB,WAArB;AACH,OAVD,CAUE,OAAO,GAAP,EAAY;AACV,cAAM,KAAK,aAAK,IAAL,wEAAsE,IAAtE,8DAAqI,GAArI,CAAX;AACH;AACJ,KAtBE;AAuBH,IAAA,MAvBG,kBAuBI,IAvBJ,EAuBU,QAvBV,EAuBoB;AACnB,MAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B,QAA9B;AACH,KAzBE;AA0BH,IAAA,QA1BG,oBA0BM,MA1BN,EA0Bc;AAAA,UACL,IADK,GACc,MADd,CACL,IADK;AAAA,UACC,QADD,GACc,MADd,CACC,QADD;AAGb,MAAA,OAAO,CAAC,IAAD,CAAP,GAAgB,QAAhB;AACH,KA9BE;AA+BH,IAAA,QA/BG,oBA+BM,YA/BN,EA+BoB;AACnB,MAAA,KAAK,qBACE,YADF,CAAL;AAGH,KAnCE;;AAoCH,QAAI,OAAJ,GAAc;AACV,aAAO,OAAP;AACH,KAtCE;;AAuCH,QAAI,KAAJ,GAAY;AACR,aAAO,KAAP;AACH;;AAzCE,GAAP;AA2CH,CA/Ca,EAAd;;eAiDe,K","file":"zoohq.js","sourcesContent":["const zoohq = (() => {\n    const actions = {};\n    let store = {};\n\n    return {\n        dispatch(type, data = undefined) {\n            const storeCopy = JSON.parse(JSON.stringify(store));\n\n            store = {\n                ...storeCopy,\n                ...data\n            };\n\n            try {\n                actions[type](store);\n\n                const customEvent = new CustomEvent(type, {\n                    detail: {\n                        store: store\n                    }\n                });\n\n                window.dispatchEvent(customEvent);\n            } catch (err) {\n                throw Error(`\"${type}\" is not a valid action type. Use zoohq.register({ type: '${type}', callback: () => {} ) to register the action first.\\n`, err);\n            }\n        },\n        listen(type, callback) {\n            window.addEventListener(type, callback);\n        },\n        register(action) {\n            const { type, callback } = action;\n\n            actions[type] = callback;\n        },\n        setStore(initialStore) {\n            store = {\n                ...initialStore\n            };\n        },\n        get actions() {\n            return actions;\n        },\n        get store() {\n            return store;\n        }\n    };\n})();\n\nexport default zoohq;\n"]}